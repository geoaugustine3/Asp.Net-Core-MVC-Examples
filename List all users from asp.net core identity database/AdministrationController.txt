using EmployeeManagement.Models;
using EmployeeManagement.ViewModel;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace EmployeeManagement.Controllers
{

    [Authorize(Roles ="Admin")]         // "Admin" is authorized to access Administration module
    public class AdministrationController : Controller
    {
        private readonly RoleManager<IdentityRole> roleManager;
        private readonly UserManager<ApplicationUser> userManager;

        public AdministrationController(RoleManager<IdentityRole> roleManager, 
            UserManager<ApplicationUser> userManager)
        {
            this.roleManager = roleManager;
            this.userManager = userManager;
        }


        [HttpGet]
        public IActionResult ListUsers()
        {
            var users = userManager.Users;  // 'Users' property contains the list of all users in AspNetUsers table.
            return View(users);

        }

        [HttpGet]                      
        public IActionResult CreateRole()
        {
            return View();

        }

        [HttpPost]
        public async Task<IActionResult> CreateRole(CreateRoleViewModel model)
        {
            if (ModelState.IsValid) // Checks validation has done or not 
            {
                

                IdentityRole identityRole = new IdentityRole()  // We just need to specify a unique role name to create a new role
                {
                    Name = model.RoleName

                };

                
                IdentityResult result = await roleManager.CreateAsync(identityRole);  // Creates the specified role under 'Name' field in database table 'AspNetRoles'.

                if (result.Succeeded)
                {
                    return RedirectToAction("ListRoles","Administration");
                }

                foreach(IdentityError error in result.Errors)
                {
                    ModelState.AddModelError("", error.Description); // Pass empty string ("") as the key and adds model errors
                }
            }

            return View(model);

        }

        [HttpGet]
        public IActionResult ListRoles()
        {
            var roles = roleManager.Roles;
            return View(roles);
        }

        [HttpGet]   
        public async Task<IActionResult> EditRole(string id)  // Gets the 'id' from the URL originated from the 'id' value set 'Edit' button.
        {
            var role = await roleManager.FindByIdAsync(id);   // Find the role by Role ID

            if (role == null)
            {
                ViewBag.ErrorMessage = $"Role with Id = {id} cannot be found"; // Error message to be displayed inside "NotFound" view is assigned.
                return View("NotFound");
            }

            var model = new EditRoleViewModel()
            {
                Id = role.Id,
                RoleName = role.Name,
            };

            foreach(var user in userManager.Users)
            {
                // If the 'user' in the  AspNetUsers table matches with the given role in the AspNetRoles table (by checking AspNetUserRoles table), 
                // then, add each of that 'username' in the AspNetUsers table to the 'Users' list property of EditRoleViewModel. This model
                // object is then passed to the view for display.

                if (await userManager.IsInRoleAsync(user, role.Name))  // As it is 'async' method, we use 'await' keyword.
                {
                    model.Users.Add(user.UserName);
                }

            }

            return View(model);            
        }


        [HttpPost]
        public async Task<IActionResult> EditRole(EditRoleViewModel model)
        {
            var role = await roleManager.FindByIdAsync(model.Id);   // Checks if 'Id' with that role exists in the AspNetRoles table 

            if (role == null)
            {
                ViewBag.ErrorMessage = $"Role with Id = {model.Id} cannot be found";
                return View("NotFound");
            }
            else
            {
                role.Name = model.RoleName;
                var result = await roleManager.UpdateAsync(role);

                if (result.Succeeded)
                {
                    return RedirectToAction("ListRoles");
                }

                foreach (var error in result.Errors)
                {
                    ModelState.AddModelError("", error.Description);
                }

                return View(model);
            }

        }


            [HttpGet]
            public async Task<IActionResult> EditUsersInRole(string roleId)
            {
                ViewBag.roleId = roleId;

                var role = await roleManager.FindByIdAsync(roleId);  // Checks if 'Id' with that role exists in the AspNetRoles table 

            if (role == null)
                {
                    ViewBag.ErrorMessage = $"Role with Id = {roleId} cannot be found";
                    return View("NotFound");
                }

                var model = new List<UserRoleViewModel>();

                foreach (var user in userManager.Users)   // Loops through all the users in the AspNetUsers table.
                {
                    var userRoleViewModel = new UserRoleViewModel
                    {
                        UserId = user.Id,
                        UserName = user.UserName
                    };

                    if (await userManager.IsInRoleAsync(user, role.Name))  //Checks the 'user' in this role is available in AspNetUserRoles table. 
                {
                        userRoleViewModel.IsSelected = true;
                    }
                    else
                    {
                        userRoleViewModel.IsSelected = false;
                    }

                    model.Add(userRoleViewModel);
                }

                return View(model);
            }




        [HttpPost]
        public async Task<IActionResult> EditUsersInRole(List<UserRoleViewModel> model, string roleId)  // Value for 'roleId' is received from URL
        {
            var role = await roleManager.FindByIdAsync(roleId);

            if (role == null)
            {
                ViewBag.ErrorMessage = $"Role with Id = {roleId} cannot be found";
                return View("NotFound");
            }

            for (int i = 0; i < model.Count; i++)
            {
                var user = await userManager.FindByIdAsync(model[i].UserId);

                IdentityResult result = null;

                if (model[i].IsSelected && !(await userManager.IsInRoleAsync(user, role.Name)))
                {
                    result = await userManager.AddToRoleAsync(user, role.Name);
                }
                else if (!model[i].IsSelected && await userManager.IsInRoleAsync(user, role.Name))
                {
                    result = await userManager.RemoveFromRoleAsync(user, role.Name);
                }
                else
                {
                    continue;
                }

                if (result.Succeeded)
                {
                    if (i < (model.Count - 1))
                        continue;
                    else
                        return RedirectToAction("EditRole", new { Id = roleId });
                }
            }

            return RedirectToAction("EditRole", new { Id = roleId });
        }

     

    }
}
