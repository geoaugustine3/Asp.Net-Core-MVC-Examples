using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using EmployeeManagement.Models;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;


namespace EmployeeManagement
{
    
    public class Startup
    {
        private IConfiguration _config;

         Notice we are using Dependency Injection here
        public Startup(IConfiguration config)
        {
            _config = config;
        }



         This method gets called by the runtime. Use this method to add services to the container.
         For more information on how to configure your application, visit httpsgo.microsoft.comfwlinkLinkID=398940
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddDbContextPoolAppDbContext(options = options.UseSqlServer(_config.GetConnectionString(EmployeeDBConnection)));

            AddIdentity() method adds the default identity system configuration for the specified user and role types.
            To store and retrieve User and Role information of the registered users using EntityFrameWork Core 
            from the underlying SQL Server database.We specify this using AddEntityFrameworkStoresAppDbContext() 
            passing our application DbContext class as the generic argument.
            services.AddIdentityIdentityUser, IdentityRole()
            .AddEntityFrameworkStoresAppDbContext();

            services.AddMvc();
            services.AddScopedIEmployeeRepository, SQLEmployeeRepository();
            
        }

        


         This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
           if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                
            }
            else
            {
               app.UseExceptionHandler(Error);
               app.UseStatusCodePagesWithReExecute(Error{0});
            }

            app.UseStaticFiles();

            call UseAuthentication() method to add the Authentication middleware to the application's request processing
            pipeline. We want to be able to authenticate users before the request reaches the MVC middleware.
            app.UseAuthentication();
             
              app.UseMvcWithDefaultRoute();
            app.UseMvc(Routes = { Routes.MapRoute(default, pragim{controller}{action}{id}); });

            app.UseMvc();

        
app.Run(async (context) =
 {
     await context.Response.WriteAsync(Hello World!);

 });  

        }
    }
}
